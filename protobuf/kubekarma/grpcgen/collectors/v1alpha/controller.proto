syntax = "proto3";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

package kubekarma.collectors.v1alpha;

/**
  TestValidationResult represents a single test case result
*/
message ValidationResult {
  enum Status {
    // ERROR: when some exception was raised during the execution of the test case
    ERROR = 0;
    // SUCCEEDED: when the test case was executed successfully
    SUCCEEDED = 1;
    // FAILED: when the test case was executed but the assertion failed
    FAILED = 2;
    // NOTIMPLEMENTED: when the test case code is not implemented yet
    NOT_IMPLEMENTED = 3;
  }

  // The specific name of the test case
  string name = 1;

  Status status = 2;
  // How long it took to execute the test case
  google.protobuf.Duration duration = 3;
  // When the test case started executing
  google.protobuf.Timestamp start_time = 4;
  // errorMessage is only set when the status is ERROR and it contains the
  // exception message and stack trace
  string error_message = 5;
}


/**
  TestSuiteResult represents the result of a whole test suite execution
*/
message ExecutionResultRequest {
  // name: is the name of the test suite
  string name = 1;
  // the time when the test suite started executing
  // it should be in ISO 8601 format
  google.protobuf.Timestamp start_time = 2;
  repeated ValidationResult validation_results = 3;
  // token: is used to identify the test suite execution
  string token = 4;
}


message ExecutionResultResponse {
  string message = 1;
}

service TestSuiteExecutionResultService {

  // ProcessTestSuiteResults is called by the test runner to report the results of the execution
  rpc ReportResults (ExecutionResultRequest) returns (ExecutionResultResponse) {}
}