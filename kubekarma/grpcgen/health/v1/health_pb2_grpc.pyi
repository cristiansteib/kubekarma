"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Source https://github.com/grpc/grpc/blob/master/doc/health-checking.md"""
import abc
import collections.abc
import grpc
import grpc.aio
import kubekarma.grpcgen.health.v1.health_pb2
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class HealthStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Check: grpc.UnaryUnaryMultiCallable[
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckRequest,
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse,
    ]
    Watch: grpc.UnaryStreamMultiCallable[
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckRequest,
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse,
    ]

class HealthAsyncStub:
    Check: grpc.aio.UnaryUnaryMultiCallable[
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckRequest,
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse,
    ]
    Watch: grpc.aio.UnaryStreamMultiCallable[
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckRequest,
        kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse,
    ]

class HealthServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Check(
        self,
        request: kubekarma.grpcgen.health.v1.health_pb2.HealthCheckRequest,
        context: _ServicerContext,
    ) -> typing.Union[kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse, collections.abc.Awaitable[kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse]]: ...
    @abc.abstractmethod
    def Watch(
        self,
        request: kubekarma.grpcgen.health.v1.health_pb2.HealthCheckRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse], collections.abc.AsyncIterator[kubekarma.grpcgen.health.v1.health_pb2.HealthCheckResponse]]: ...

def add_HealthServicer_to_server(servicer: HealthServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
