---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-account
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-cluster-role
rules:

  # Framework: knowing which other operators are running (i.e. peering).
  - apiGroups: [kopf.dev]
    resources: [clusterkopfpeerings]
    verbs: [list, watch, patch, get]

  # Framework: runtime observation of namespaces & CRDs (addition/deletion).
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [list, watch]

  - apiGroups: [""]
    resources: [pods]
    verbs: [list, watch]
  - apiGroups: ["batch"]
    resources: [cronjobs]
    verbs: [list, watch, create]

  - apiGroups: [""]
    resources:
      - events
    verbs:
      - create

  - apiGroups: [{{ .Values.crd.group }}]
    resources: [{{ .Values.crd.plural }}]
    verbs: [list, watch, patch, get]

  # Application: read-only access for watching cluster-wide.
  - apiGroups: [kopf.dev]
    resources: [kopfexamples]
    verbs: [list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-cluster-role
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-account
    namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Release.Name }}-namespace-role
rules:
  - apiGroups: [ "" ]
    resources: [ events ]
    verbs: [ create ]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Release.Name }}-namespaced-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ .Release.Name }}-namespace-role
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-account